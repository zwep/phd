from objective_configuration.fourteenT import CALC_OPTIONS, DDATA
from objective_helper.fourteenT import ReadMatData, OptimizeData
import os
import helper.misc as hmisc
import helper.plot_fun as hplotf
import helper.plot_class as hplotc
import numpy as np

"""
"""

file_list = os.listdir(DDATA)
mat_files = [x for x in file_list if x.endswith('mat')]

for i_options in CALC_OPTIONS:
    full_mask = i_options['full_mask']
    type_mask = i_options['type_mask']
    objective_str = i_options['objective_str']
    ddest = i_options['ddest']
    sel_mat_file = mat_files[0]
    mat_reader = ReadMatData(ddata=DDATA, mat_file=sel_mat_file)
    data_obj = OptimizeData(ddest=ddest, objective_str=objective_str, mat_reader=mat_reader, full_mask=full_mask, type_mask=type_mask)
ddest_dict = os.path.join(data_obj.ddest_optim_shim_coil, f'opt_shim_{str(0).zfill(2)}.json')
result_dict = hmisc.load_json(ddest_dict)
derp_shims = [np.array(x[0]) + 1j * np.array(x[1]) for x in result_dict['opt_shim']]
b1_array = mat_reader.read_B1_object()
mask_obj = mat_reader.read_mask_object()
brain_mask = mask_obj['target_mask'] - mask_obj['substrate_mask']
b1p_array = b1_array['b1p']
b1p_array_slice = np.array([hplotf.get_all_mid_slices(x)[-1] for x in b1p_array])
# All coils
fig_obj = hplotc.ListPlot(np.array(b1p_array_slice)[None], augm='np.abs', sub_col_row=(4, 2), ax_off=True,
                          cmap='viridis')
fig_obj.figure.savefig(os.path.join('/data/seb/test.png'))

# Not shimmed
b1p_abs_sum = np.abs(b1p_array_slice.mean(axis=0))

param_shim = '/data/seb/paper/14T/plot__body_kt_optimal_for_forward_power'
# derp_shims = [[[-0.29776243592558127, 1.8120767320654965, -2.583954078429794, -0.13920302889886207, 0.2429136165170151, 0.6259806805474842, 1.743627360726257, 1.950890677951677], [0.764871593898244, -3.3868229198403705, -2.176861521792768, -1.471140263621604, -1.7488519510790115, 0.22413346654022676, 3.493727032379385, 1.69338992924481]], [[-0.5187380926909293, -0.08050849058031498, -1.4005208327571912, -0.5516835776219291, 0.05251734938717478, -0.9789051426282501, 1.7367867362664993, 1.2977035050421037], [0.623377292521909, -1.1267343991548906, 0.6269557943941639, 0.0966006767401424, -2.8555772343328027, -0.15733320229416453, -0.3160148094072984, 1.901583737501745]], [[-0.3589095848671488, -0.29327942936825085, -0.8420692232021451, -0.10332024008058736, -0.6443113274085502, -0.8861740163571367, 1.2530889248429231, 1.5813504215232193], [0.5879114845142495, -0.8136087773565084, 1.1516263385422514, 0.224635463053399, -2.2865749553852432, 0.13827037835033812, -0.9472519273958976, 1.4093574694760436]], [[-0.5573653129485102, 0.32964529066247616, -1.2107400173954903, -0.09480171218170966, 0.883995729086329, -0.6608636515891317, 1.379497717512199, 0.10747383327057818], [0.0593109758158376, -0.6751979765598947, 0.40872245271285457, 0.19852796843954207, -1.8034403636466816, -0.49686136102452966, 0.08654189677616732, 1.8905296267830487]], [[0.4083288186476774, 0.09577999422057513, 0.5030190565246213, -0.0951824636182038, 0.4104967098826009, 0.7383619717600125, -1.0469191874294423, -1.0121845063807289], [-0.2146572378273007, 0.6682090130689015, -0.9968385958774587, -0.20562294696054342, 1.6395285214306872, 0.09045206425373106, 0.6247229887277196, -1.3432301674134675]], [[1.0316551433403673, -0.3052476219154173, -0.9987591491780003, 0.6968059358586882, 0.6773473435385986, 0.03285857781341611, -1.0065728237830565, -0.012307467305411393], [0.3973047677243122, 0.3789422350214553, 0.003118275076702979, 0.31351845486848406, -1.3487270988135254, 0.9624912089580371, -0.3750310483300274, -0.7936613120402021]], [[0.9833960064527185, -0.04046129187562588, -0.7823287132183225, 0.6643367316235381, -0.07623662711667299, 0.49202845006339185, -0.9617088651785928, -0.3746994425859384], [-0.19274071094658948, 0.4368933619567108, 0.46541917584764614, -0.09533538111590789, -1.3542451319465794, 0.7258879964586993, 0.17313963985757627, -0.5984391024929685]], [[0.01535691141446402, -0.3850324362691435, -0.2751881482711465, -0.018268069521650894, 1.2082394862729273, -0.728255873080323, 0.014164154832855705, 0.5881936509543569], [0.9099056485923287, -0.09797213836470785, -0.782697170629937, 0.593426357312631, 0.18351775251482474, 0.32542663187655096, -0.8880274762618225, -0.23029320934804992]], [[-0.776755862635768, -0.039087694445169546, 0.5979091783750929, -0.5037397575472254, 0.1842147540327524, -0.5026678339657544, 0.7695599804568088, 0.370663134079476], [0.29096478361583245, -0.35947705462697377, -0.46608654411088374, 0.16319413503869884, 1.090792919906497, -0.5253538914533827, -0.24963854283914544, 0.4316854140453672]], [[0.4436380125448516, -0.30650470977411864, -0.5505424173691056, 0.2611884121985179, 0.9219250364112046, -0.34237878689321316, -0.39965266110714365, 0.2909250808518731], [0.6165403707655127, 0.12474926256673834, -0.4249850009137741, 0.39822504914791096, -0.40524727696718293, 0.5705210569826794, -0.6227299655904804, -0.4263943394026374]], [[0.3880100462634711, 0.20884217255806817, -0.19562951654753893, 0.2544774148096486, -0.6339846659978069, 0.6018101687661709, -0.4103104151337948, -0.45785331471425367], [-0.5814650650026633, 0.22161705121361167, 0.6103775181722954, -0.34880754518332263, -0.6697266885814802, 0.10970879206318887, 0.5422275920404981, -0.11274581390164803]], [[-0.2044218809757654, -0.24166376379675747, 0.031306788602380814, -0.13985614309250774, 0.7204782347807472, -0.5629544761615711, 0.23624584295101214, 0.4333578363802741], [0.6133490960091578, -0.14471715927107345, -0.5926255475081201, 0.36871662619416856, 0.4497858079243314, 0.04958414282678413, -0.5818029993009274, -0.010754174679606567]], [[-0.3358565747587016, -0.18170690115004057, 0.17993936144962927, -0.21456880989215352, 0.5251808421448682, -0.5158401297660851, 0.3576221497799914, 0.38868727500003397], [0.4980962405295325, -0.18850282464314155, -0.521767525340323, 0.2922566525581153, 0.5853615427816944, -0.09513557721878978, -0.45997178386932214, 0.09788216134339228]], [[0.0364892144385465, -0.24207785490931868, -0.16202305441806614, 0.00861948494850358, 0.7186212288684842, -0.43437443921670876, 0.002883946741419386, 0.34135861087409375], [0.559460866252553, -0.03390029865678197, -0.4893271468290221, 0.33520162336083326, 0.13777804922066758, 0.22459738767355542, -0.5430005923150252, -0.14918461584031947]], [[-0.42642639526772125, -0.09441576866219996, 0.3106194350588761, -0.2599420515270361, 0.24222049592375283, -0.3940017209372911, 0.432957783117153, 0.2871335375746444], [0.3067818221083382, -0.20877311437492999, -0.37020576408142225, 0.17206817234624444, 0.6394675658617093, -0.2329709853216375, -0.2660018441807669, 0.19634225732757896]], [[0.4888966577971115, -0.07150180906203246, -0.45238274483943336, 0.2863353988745683, 0.25652899144037766, 0.1148517129110587, -0.46595888842757366, -0.0661247754876985], [0.07078613240587496, 0.20335715868926935, 0.04560436970754507, 0.05278157842666233, -0.5880617211785437, 0.4144158721882327, -0.10339723636293909, -0.3193623162251586]], [[-0.1630355540550263, 0.20063232105177026, 0.24142387631180492, -0.08569292151361406, -0.6019583898243291, 0.29035352994268404, 0.1248533576269812, -0.233566722046727], [-0.436633076051181, -0.03383343652523675, 0.3548239988711544, -0.25927596722627994, 0.05106124528411752, -0.28290179782470587, 0.4321672771814331, 0.19910971009082906]], [[-0.42833898821998767, -0.010397837192122693, 0.3608955820825198, -0.2517789276735302, -0.020819977418697413, -0.23399959487924604, 0.41961834111209234, 0.16122029686615622], [0.10517268488716797, -0.19234134722084337, -0.18661021028132604, 0.051800619076050713, 0.5703116551825134, -0.3036153841837439, -0.06916348781671874, 0.2408083982112196]], [[-0.27088239406107867, 0.15865705162413563, 0.3107938173998715, -0.15005888173883924, -0.49310739912822316, 0.15818909238985093, 0.2360419842053119, -0.13566931990844094], [-0.3190468773225416, -0.09090197967688231, 0.2283439924656236, -0.19084880820109906, 0.221800464752409, -0.32725080601465356, 0.32687787757944536, 0.2385719620964948]], [[0.17901217260466712, 0.13882042852815057, -0.08580124987268595, 0.11101515266527558, -0.3754336169147814, 0.34512500569012977, -0.1989429172076347, -0.2588760455657387], [-0.3556301103284016, 0.10491980962914743, 0.35681005205907723, -0.2014125830982685, -0.3505341418516502, 0.016948841272648153, 0.3275548766120545, -0.030152417974926033]], [[0.37923854868366275, -0.03668314178486307, -0.34413139929353215, 0.2177197841986303, 0.15961701711295215, 0.1201041143286678, -0.36228501541854075, -0.07485113000132154], [0.016885506228205314, 0.1618637746618002, 0.06379124806081206, 0.01783414765529235, -0.4623433092631171, 0.306568894827856, -0.04544823599470737, -0.2365512380093251]], [[0.12634842270334581, -0.15607400845664332, -0.18366399300482716, 0.06518029311170856, 0.46581838228644484, -0.22478391151159027, -0.09459348144860777, 0.17994251291537877], [0.3399880111521427, 0.028349193383866995, -0.2795473964463946, 0.19752843995886715, -0.030345315927035314, 0.21983266622544897, -0.3355391611154056, -0.153824347140923]], [[0.15091502730919562, -0.1461708830109813, -0.19964077233039057, 0.07961482523635084, 0.4409706680444699, -0.19429973476394038, -0.11997392601386148, 0.15742358904869608], [0.31270722188422007, 0.04132717808122182, -0.2504316198622432, 0.18183812805988153, -0.06950227554816402, 0.2296610233889217, -0.31119090694241425, -0.1626242264126262]], [[-0.1949903519405916, -0.10174483080729183, 0.12079135033468968, -0.11674897307127638, 0.2586973997843219, -0.28224630102936554, 0.20783487620086272, 0.2087763256648234], [0.2699205681437504, -0.10431143479548247, -0.2824535715994981, 0.14967629278571917, 0.3406060011269914, -0.05902211805112543, -0.24286249135792778, 0.05847900383972917]], [[0.2840779402845623, 0.042303694377086164, -0.22625330707041696, 0.16448295079477548, -0.07340023682132266, 0.21642453869050807, -0.2832766115652094, -0.15359211144709306], [-0.14699771810875475, 0.13346444389356812, 0.18951704911569345, -0.07759336207499432, -0.40388183091138635, 0.17265728529576574, 0.11802543710935852, -0.1403349789869475]]]
for ii, shim_coeff in enumerate(derp_shims):
    #shim_real = np.array(shim_real)
    #shim_imag = np.array(shim_imag)
    #shim_coeff = shim_real + 1j * shim_imag
    b1p_abs_shim = np.abs((b1p_array_slice.T @ shim_coeff).T)
    fig_obj = hplotc.ListPlot([b1p_abs_shim], augm='np.abs', ax_off=True, cmap='viridis', cbar=True, vmin=(0,1))
    fig_obj.figure.savefig(os.path.join(f'/data/seb/test_shim_{ii}.png'))
    hplotc.close_all()



"""
Zo goed werkt sigpy shim dus...
Type errors..
"""
import sigpy.mri.rf
n_coil = b1p_array.shape[0]
brain_mask.shape
result_shim = sigpy.mri.rf.calc_shims(brain_mask.astype(bool), b1p_array, np.ones(n_coil).reshape(n_coil, 1), 1e-4, lamb=0, max_iter=50)

k1 = np.expand_dims(np.array((0, 0, 0)), 0)
A = sigpy.mri.rf.PtxSpatialExplicit(b1p_array, coord=k1, dt=1e-4,
                          img_shape=b1p_array.shape, ret_array=False)
#/En